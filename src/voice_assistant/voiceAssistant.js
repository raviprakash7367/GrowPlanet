class VoiceAssistant {
  constructor() {
    this.isListening = false;
    this.recognition = null;
    this.showChat = false;
    this.showHelp = false;
    this.currentLang = 'en-US'; // Default language
    this.translations = {
      'en-US': {
        title: 'Farming Assistant',
        placeholder: 'Listening...',
        helpTitle: 'What can I ask?',
        errorMessage: "I'm sorry, I couldn't understand that. Could you please rephrase your question?",
        sampleQuestions: [
          "What crops should I plant?",
          "How to control pests?",
          "When should I water my crops?",
          "What's the weather forecast?",
          "What are current crop prices?",
          "How to improve soil quality?"
        ],
        responses: {
          'what crops should I plant': 'Based on the current season and soil conditions, you might consider planting wheat, corn, or soybeans.',
          'how to control pests': 'You can use natural pest control methods like neem oil or introduce beneficial insects.',
          'when should I water': 'Water your crops early in the morning or late in the evening to minimize evaporation.',
          'help': 'I can help you with crop selection, pest control, irrigation advice, and other farming-related questions.',
          'weather': 'Let me check the weather forecast for your area.',
          'price': 'I can help you check current market prices for various crops.',
          'soil quality': 'To improve soil quality, you can add organic matter, maintain proper pH, and practice crop rotation.'
        }
      },
      'hi-IN': {
        title: '‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï',
        placeholder: '‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...',
        helpTitle: '‡§Æ‡•à‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?',
        errorMessage: '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§Æ‡§ù ‡§™‡§æ‡§Ø‡§æ‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¶‡•ã‡§π‡§∞‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?',
        sampleQuestions: [
          "‡§ï‡•å‡§® ‡§∏‡•Ä ‡§´‡§∏‡§≤ ‡§¨‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è?",
          "‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?",
          "‡§´‡§∏‡§≤ ‡§ï‡•ã ‡§™‡§æ‡§®‡•Ä ‡§ï‡§¨ ‡§¶‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?",
          "‡§Æ‡•å‡§∏‡§Æ ‡§ï‡§æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§® ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§≠‡§æ‡§µ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?",
          "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§ï‡•à‡§∏‡•á ‡§∏‡•Å‡§ß‡§æ‡§∞‡•á‡§Ç?"
        ],
        responses: {
          '‡§ï‡•å‡§® ‡§∏‡•Ä ‡§´‡§∏‡§≤': '‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§î‡§∞ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞, ‡§Ü‡§™ ‡§ó‡•á‡§π‡•Ç‡§Ç, ‡§Æ‡§ï‡•ç‡§ï‡§æ, ‡§Ø‡§æ ‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§® ‡§≤‡§ó‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§',
          '‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£': '‡§Ü‡§™ ‡§®‡•Ä‡§Æ ‡§ï‡§æ ‡§§‡•á‡§≤ ‡§Ø‡§æ ‡§≤‡§æ‡§≠‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•Ä‡§°‡§º‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§',
          '‡§™‡§æ‡§®‡•Ä ‡§ï‡§¨ ‡§¶‡•á‡§Ç': '‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•ã ‡§∏‡•Å‡§¨‡§π ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§Ø‡§æ ‡§∂‡§æ‡§Æ ‡§ï‡•ã ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§Ç, ‡§á‡§∏‡§∏‡•á ‡§™‡§æ‡§®‡•Ä ‡§ï‡§Æ ‡§µ‡§æ‡§∑‡•ç‡§™‡§ø‡§§ ‡§π‡•ã‡§ó‡§æ‡•§',
          '‡§Æ‡§¶‡§¶': '‡§Æ‡•à‡§Ç ‡§´‡§∏‡§≤ ‡§ö‡§Ø‡§®, ‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£, ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∏‡§≤‡§æ‡§π ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§',
          '‡§Æ‡•å‡§∏‡§Æ': '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§',
          '‡§¶‡§æ‡§Æ': '‡§Æ‡•à‡§Ç ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§',
          '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§∏‡•Å‡§ß‡§æ‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Ü‡§™ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§°‡§æ‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§â‡§ö‡§ø‡§§ ‡§™‡•Ä‡§è‡§ö ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§î‡§∞ ‡§´‡§∏‡§≤ ‡§ö‡§ï‡•ç‡§∞ ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§'
        }
      }
    };
    this.setupVoiceAssistant();
    this.createUI();
    this.setupLanguageSwitch();
  }

  setupVoiceAssistant() {
    if ('webkitSpeechRecognition' in window) {
      this.recognition = new window.webkitSpeechRecognition();
      this.recognition.continuous = false;
      this.recognition.interimResults = false;
      this.recognition.lang = this.currentLang;

      this.recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        this.updateTranscript(transcript);
        this.handleQuery(transcript);
      };

      this.recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        this.isListening = false;
        this.updateMicButton();
      };

      this.recognition.onend = () => {
        this.isListening = false;
        this.updateMicButton();
      };
    }
  }

  createUI() {
    // Create help menu
    const helpMenu = document.createElement('div');
    helpMenu.className = 'voice-help-menu';
    helpMenu.style.display = 'none';
    
    // Create chat window
    const chatWindow = document.createElement('div');
    chatWindow.className = 'voice-chat-window';
    chatWindow.style.display = 'none';
    chatWindow.innerHTML = `
      <div class="voice-chat-header">
        <h3>${this.translations[this.currentLang].title}</h3>
        <div class="voice-header-controls">
          <div class="voice-language-selector">
            <button class="voice-lang-btn" data-lang="en-US">EN</button>
            <button class="voice-lang-btn" data-lang="hi-IN">‡§π‡§ø‡§Ç</button>
          </div>
          <button class="voice-help-btn">‚ùì</button>
          <button class="voice-chat-close">√ó</button>
        </div>
      </div>
      <div class="voice-help-content">
        <h4>${this.translations[this.currentLang].helpTitle}</h4>
        <ul>
          ${this.translations[this.currentLang].sampleQuestions.map(q => `<li>${q}</li>`).join('')}
        </ul>
      </div>
      <div class="voice-chat-messages"></div>
      <div class="voice-chat-status">
        <span class="voice-status-dot"></span>
        <span class="voice-status-text">${this.translations[this.currentLang].placeholder}</span>
      </div>
    `;

    // Create mic button with tooltip
    const micContainer = document.createElement('div');
    micContainer.className = 'voice-mic-container';
    micContainer.innerHTML = `
      <button class="voice-floating-mic" title="Click to speak">üé§</button>
      <span class="voice-mic-tooltip">Ask your farming questions</span>
    `;

    // Add elements to body
    document.body.appendChild(chatWindow);
    document.body.appendChild(micContainer);

    // Add event listeners
    micContainer.querySelector('.voice-floating-mic').addEventListener('click', () => this.toggleListening());
    chatWindow.querySelector('.voice-chat-close').addEventListener('click', () => this.toggleChat());
    chatWindow.querySelector('.voice-help-btn').addEventListener('click', () => this.toggleHelp());

    // Store references
    this.chatWindow = chatWindow;
    this.micButton = micContainer.querySelector('.voice-floating-mic');
    this.messagesContainer = chatWindow.querySelector('.voice-chat-messages');
    this.helpContent = chatWindow.querySelector('.voice-help-content');
    this.statusText = chatWindow.querySelector('.voice-status-text');
    this.statusDot = chatWindow.querySelector('.voice-status-dot');
  }

  setupLanguageSwitch() {
    const langButtons = this.chatWindow.querySelectorAll('.voice-lang-btn');
    langButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        this.currentLang = btn.dataset.lang;
        this.recognition.lang = this.currentLang;
        langButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // Update all translations
        this.chatWindow.querySelector('h3').textContent = this.translations[this.currentLang].title;
        this.chatWindow.querySelector('.voice-help-content h4').textContent = this.translations[this.currentLang].helpTitle;
        const questionsList = this.translations[this.currentLang].sampleQuestions.map(q => `<li>${q}</li>`).join('');
        this.chatWindow.querySelector('.voice-help-content ul').innerHTML = questionsList;
        this.statusText.textContent = this.translations[this.currentLang].placeholder;
      });
      if (btn.dataset.lang === this.currentLang) {
        btn.classList.add('active');
      }
    });
  }

  toggleListening() {
    if (this.isListening) {
      this.recognition.stop();
      this.statusText.textContent = this.translations[this.currentLang].placeholder;
      this.statusDot.classList.remove('pulse');
    } else {
      this.recognition.lang = this.currentLang;
      this.recognition.start();
      this.showChat = true;
      this.chatWindow.style.display = 'block';
      this.statusText.textContent = this.translations[this.currentLang].placeholder;
      this.statusDot.classList.add('pulse');
    }
    this.isListening = !this.isListening;
    this.updateMicButton();
  }

  toggleChat() {
    this.showChat = !this.showChat;
    this.chatWindow.style.display = this.showChat ? 'block' : 'none';
    if (!this.showChat) {
      this.helpContent.style.display = 'none';
      this.showHelp = false;
    }
  }

  toggleHelp() {
    this.showHelp = !this.showHelp;
    this.helpContent.style.display = this.showHelp ? 'block' : 'none';
  }

  updateMicButton() {
    this.micButton.classList.toggle('listening', this.isListening);
  }

  updateTranscript(transcript) {
    const userMessage = document.createElement('div');
    userMessage.className = 'voice-user-message';
    userMessage.innerHTML = `<p>${transcript}</p>`;
    this.messagesContainer.appendChild(userMessage);
    this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
  }

  async handleQuery(query) {
    try {
      const currentTranslations = this.translations[this.currentLang];
      const responses = currentTranslations.responses;
      
      let response = currentTranslations.errorMessage;
      for (const [key, value] of Object.entries(responses)) {
        if (query.toLowerCase().includes(key.toLowerCase())) {
          response = value;
          break;
        }
      }

      const assistantMessage = document.createElement('div');
      assistantMessage.className = 'voice-assistant-message';
      assistantMessage.innerHTML = `<p>${response}</p>`;
      this.messagesContainer.appendChild(assistantMessage);
      this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;

      // Text-to-speech
      const utterance = new SpeechSynthesisUtterance(response);
      utterance.lang = this.currentLang;
      speechSynthesis.speak(utterance);
    } catch (error) {
      console.error('Error processing query:', error);
    }
  }
}

// Initialize voice assistant when the page loads
window.addEventListener('load', () => {
  new VoiceAssistant();
}); 